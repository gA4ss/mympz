#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <gtest/gtest.h>
#include <mympz/mympz.h>

using namespace mympz;

TEST(Mympz, Mul) {
  bignum_t x,y,z;
  std::string z_str;

  x = create("123");
  y = create("456");
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_STREQ(z_str.c_str(), "56088");

  x = create(123578);
  y = create(456);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "56351568");

  x = create("11223344", true);
  set_null(y);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "0");

  x = create("11223344", true);
  y = create("FFAABBCCDD11223344",true);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "1355697085464670318806017780240");

  x = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "724948630038211300262027353826847304885006386517166697273054613032306276100606417205552458649534668859699986390670486221376797619156481"
  );

  x = create("AABBCCDD11223344FF", true);
  y = create("AABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "9919217508950238964391809001267598776759809"
  ) << "z = " << z_str << std::endl;

  x = create("AABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("AABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "221205942235902929962382089418057074222026222438647036177800827292480808197259604948481"
  ) << "z = " << z_str << std::endl;

  x = create("AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344", true);
  y = create("AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "79960149583794370769120163484136595939595559258282388572865740383026900411854219130915989998806362192862554318727983117849921232835796859313826797498611706495830102828094476350276269193714947350782982138873663433393268336088252664727055965972473579219937471215011938373524105291316469570620903153103986240016"
  ) << "z = " << z_str << std::endl;

  x = create("8942043926518946080429422979427194484335159410898623845040715976163488118333039804774075641336630690054458779460283203102033307073664421602113483754844996");
  y = create("8942043926518946080429422979427194484335159410898623845040715976163488118333039804774075641336630690054458779460283203102033307073664421602113483754844996");
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "79960149583794370769120163484136595939595559258282388572865740383026900411854219130915989998806362192862554318727983117849921232835796859313826797498611706495830102828094476350276269193714947350782982138873663433393268336088252664727055965972473579219937471215011938373524105291316469570620903153103986240016"
  ) << "z = " << z_str << std::endl;
}

TEST(Mympz, Debug_Mul_2022_8_11) {
  bignum_t x,y,z;
  std::string z_str;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "1548480875470243394570829806970107356277287509701749365463272316263365322349154739098690682643123704907887564417482029621433810080174327057660661511730063656044550344857154352945834938769483254389996318822072687439353782859592811555"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z, true, true);
  EXPECT_TRUE(
    z_str == "ff5594001642abcba9b8f86672f535abc162729b38e5d428abb71b2c3e0b58b31babacd3e5e0ddcb920e897aabc2350d82ad92897aabc18a8a93a783eec013c3e7b820c890eeca5b0a44e5ade99deed4a250a2133b0aaaeedee996ff40c82bb7ef"
  ) << "z = " << z_str << std::endl;

  x = create("1408335152036891845064774140128163122678677163732344857147174767545371034747545071785396038660534405586894141133878213557391674149625505039326463578597748262393690174351051155420733173536784859278623676645236193734893756");
  y = create("ffaabbccdd11223344", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "6642021777861578108726014659359177101296330428574414516068020792661650807094330801127658358449447987495555937479091544940215875177157187974452648415689595305921359698646236009904566717358729985197489749163927655887918445717700368710933554672"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "6650674718626144000841737976518603944819970161758296238653506487493322982390117497672288998372131152676813339264554275602125444034666012882998768442091920070581622014516064967552225422918519607971738179468284908648125454502697625608592761020"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "526920737436821383058420593117698760762889950390062432840721697431592308330208845325410471281140170814780418951241036645986533343228611279386393943859711667880845043450153662490622068490206058068625213612425412073622044973809317774521903728992540850552870342453156279809"
  ) << "z = " << z_str << std::endl;

  x = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FFFFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FFFFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "526920737436821383058420593117698760762889950390062432840721697431592308330208845325410471281140170814780418951241036645986533343228611279386393943859711667880845043450153662490622068490206058068625213612425412073622044973809317774521903728992540850552870342453156279809"
  ) << "z = " << z_str << std::endl;

  x = create(
    "0xAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = create(
    "0xAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFDDCCBB12345784365482785490910375482749031560427490368427489FFA"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "y = " << print_string(y) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  // std::cout << "z = " << z_str << std::endl;
  EXPECT_TRUE(z_str == "95182908626096454627674253859438734383048570014430117367565878989280758838921144511202338182645030686894953653397936299141291598493002235885025147846661641518763464036753026042812247905268328579759732521641104236894006953442184778759714107011677675068593974351405525035933739415696065160517159969222833278942421782826307144573129405193008094089398771513341761064756231213692202709654017985115105666178113158217367534151866581719810611479125143939941038298061580234147367888863059841118965263638430044058980237808711045012372690809068808599757899586959752522797816274380090092985832652472092757704457989854392327298225007460227321114974221287946243948657627622207678166859550208787719410166580476310669918942023582261786556765938359813873689287591754751210569387817571989517469011604277935139574637622688626175218393340011395673323193175336506214862525966454320154870706599948996430736946997259740471011084831947725393795596244537238976220148586437933769577012210062728239545844479711717460845423931143323403395453801477539452550426535909081396175445568342037881541912133876259047488674271705633700211299497499996348228393564929715686401921523409385491862983676448184040196971077735358067190798928017131922120654074822282143419336192315287501851788470648325367964727033073456065598372035197971265949366482782285584506228477590813785561912556675426003523571531626498771217500344463111");
}

TEST(Mympz, Mul_Recursive) {
  bignum_t x,y,z;
  std::string z_str;

  x = create(
    "0xAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = create(
    "0xAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFDDCCBB12345784365482785490910375482749031560427490368427489FFF"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "y = " << print_string(y) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  // std::cout << "z = " << z_str << std::endl;
  EXPECT_TRUE(z_str == "1276194157071977674275697566505294624414022128759054218003137124276166909716438426625597644313685688127198302159358966299899839493269795952339272216236050274607731727616238295133824586213687865347098272745845907680220213127026771888775298463879749681994677971685278391931085854080136959893012338463244202053437655693073630416595882742238420090560244345703242716624110898612740415234705548461028380082858461289030763949331329787274773606376525285578403683704567171445865684205686506739340539232957057430643112717755660531149801911627383899328281498881790685852234049491054941421201171636433452107092308205562404578349821651099021109290459148123681357619497060113908408377817249017023445162762174252361835150646055346152068523438786117614600540508126472112000170418024425604833868706632322919842724429918521748812871082884912008344361888873803201703786557265973610572786232686145581586767192162250685382961470391302744598196340672056651947948555095888556764413054640644340339942098637359180225758592769593140311200806678157415693696788546591264517574770507022057012756268887332693038787223882577754328387432908659424880250003372871743279621871199119596913331093519246686499027984307214898014911925146597694048302770028203918931965201624575135368829111020262509576767793002219034764244912888754075149949093672684804680238956545530370826767547087036512807949127884316158165178141666746707306767689495401044726350226561803589878748376481679227525257911153762348642237121955903837796060085285766208213741420401418907697824611075385464680991945");
}

int main(int argc, char* argv[]) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}