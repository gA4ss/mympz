#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <gtest/gtest.h>
#include <mympz/mympz.h>

using namespace mympz;

TEST(Mympz, Mul) {
  bignum_t x,y,z;
  std::string z_str;

  x = create("123");
  y = create("456");
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_STREQ(z_str.c_str(), "56088");

  x = create(123578);
  y = create(456);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "56351568");

  x = create("11223344", true);
  set_null(y);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "0");

  x = create("11223344", true);
  y = create("FFAABBCCDD11223344",true);
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(z_str == "1355697085464670318806017780240");

  x = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "724948630038211300262027353826847304885006386517166697273054613032306276100606417205552458649534668859699986390670486221376797619156481"
  );

  x = create("AABBCCDD11223344FF", true);
  y = create("AABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "9919217508950238964391809001267598776759809"
  ) << "z = " << z_str << std::endl;

  x = create("AABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("AABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "221205942235902929962382089418057074222026222438647036177800827292480808197259604948481"
  ) << "z = " << z_str << std::endl;

  x = create("AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344", true);
  y = create("AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344AABBCCDD11223344", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "79960149583794370769120163484136595939595559258282388572865740383026900411854219130915989998806362192862554318727983117849921232835796859313826797498611706495830102828094476350276269193714947350782982138873663433393268336088252664727055965972473579219937471215011938373524105291316469570620903153103986240016"
  ) << "z = " << z_str << std::endl;

  x = create("8942043926518946080429422979427194484335159410898623845040715976163488118333039804774075641336630690054458779460283203102033307073664421602113483754844996");
  y = create("8942043926518946080429422979427194484335159410898623845040715976163488118333039804774075641336630690054458779460283203102033307073664421602113483754844996");
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "79960149583794370769120163484136595939595559258282388572865740383026900411854219130915989998806362192862554318727983117849921232835796859313826797498611706495830102828094476350276269193714947350782982138873663433393268336088252664727055965972473579219937471215011938373524105291316469570620903153103986240016"
  ) << "z = " << z_str << std::endl;
}

TEST(Mympz, Debug_Mul_2022_8_11) {
  bignum_t x,y,z;
  std::string z_str;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "1548480875470243394570829806970107356277287509701749365463272316263365322349154739098690682643123704907887564417482029621433810080174327057660661511730063656044550344857154352945834938769483254389996318822072687439353782859592811555"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z, true, true);
  EXPECT_TRUE(
    z_str == "ff5594001642abcba9b8f86672f535abc162729b38e5d428abb71b2c3e0b58b31babacd3e5e0ddcb920e897aabc2350d82ad92897aabc18a8a93a783eec013c3e7b820c890eeca5b0a44e5ade99deed4a250a2133b0aaaeedee996ff40c82bb7ef"
  ) << "z = " << z_str << std::endl;

  x = create("1408335152036891845064774140128163122678677163732344857147174767545371034747545071785396038660534405586894141133878213557391674149625505039326463578597748262393690174351051155420733173536784859278623676645236193734893756");
  y = create("ffaabbccdd11223344", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "6642021777861578108726014659359177101296330428574414516068020792661650807094330801127658358449447987495555937479091544940215875177157187974452648415689595305921359698646236009904566717358729985197489749163927655887918445717700368710933554672"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "6650674718626144000841737976518603944819970161758296238653506487493322982390117497672288998372131152676813339264554275602125444034666012882998768442091920070581622014516064967552225422918519607971738179468284908648125454502697625608592761020"
  ) << "z = " << z_str << std::endl;

  x = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  y = create("ffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ffffaabbccdd11223344ffaabbccdd11223344ffaabbccdd11223344ff", true);
  // std::cout << "x = " << print_string(x) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "526920737436821383058420593117698760762889950390062432840721697431592308330208845325410471281140170814780418951241036645986533343228611279386393943859711667880845043450153662490622068490206058068625213612425412073622044973809317774521903728992540850552870342453156279809"
  ) << "z = " << z_str << std::endl;

  x = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FFFFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  y = create("FFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FFFFAABBCCDD11223344FFAABBCCDD11223344FFAABBCCDD11223344FF", true);
  // std::cout << "x = " << print_string(x, true) << std::endl;
  z = mul(x, y);
  z_str = print_string(z);
  EXPECT_TRUE(
    z_str == "526920737436821383058420593117698760762889950390062432840721697431592308330208845325410471281140170814780418951241036645986533343228611279386393943859711667880845043450153662490622068490206058068625213612425412073622044973809317774521903728992540850552870342453156279809"
  ) << "z = " << z_str << std::endl;

  // x = create("542312987594815423856747823648316483765817498347594387654298305473296754093285473267954278547852437985044378493174981327489321074893017431123578");
  // y = create("542312987594815423856747823648316483765817498347594387654298305473296754");
  // z = add(x, y);
  // z_str = print_string(z);
  // EXPECT_TRUE(z_str == "542312987594815423856747823648316483765817498347594387654298305473296754635598460862769702404600261633360862258992479675083708729191322904420332");

  // x = create("457983178439069536858730917898542748542543432135748265824310978965742043718292075940274893217598104381274983217489321748903427158942374893102749032715948237493201749834750917483921074983217493174319180952");
  // y = create("-542312987594815423856747823648316483765817498347594387654298305473296754635598460862769702404600261633360862258992479675083708729191322904420332");
  // z = add(x, y);
  // z_str = print_string(z);
  // EXPECT_TRUE(z_str == "457983178439069536858730917898542748542543432135748265824310436652754448902868219192451244901114338563776635623101667450597953862187739294641886263013543637231568388972491925004245991274488301851414760620");

  // x = create("-457983178439069536858730917898542748542543432135748265824310978965742043718292075940274893217598104381274983217489321748903427158942374893102749032715948237493201749834750917483921074983217493174319180952");
  // y = create("542312987594815423856747823648316483765817498347594387654298305473296754635598460862769702404600261633360862258992479675083708729191322904420332");
  // z = add(x, y);
  // z_str = print_string(z);
  // EXPECT_TRUE(z_str == "-457983178439069536858730917898542748542543432135748265824310436652754448902868219192451244901114338563776635623101667450597953862187739294641886263013543637231568388972491925004245991274488301851414760620");
}

int main(int argc, char* argv[]) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}