#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <iostream>
#include <gtest/gtest.h>
#include <mympz/mympz.h>

using namespace mympz;

TEST(Mympz, Sqr) {
  bignum_t x,y;
  std::string y_str;

  x = create(
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = sqr(x);
  y_str = print_string(y);
  // std::cout << "y = " << y_str << std::endl;
  EXPECT_TRUE(y_str == "83636660277869128861332115718490988505597354230353377231053594576562874595395699123775128532187370050473773606681407782137649511388655126763375705864158413062732828391941279697853373899961931902056276415354885235085165781989412596818388316491578547780700576381523226597534676679994284430704042587561529638497399371271779038204655861287888136074051386035528571210693145416798608386216102344457516919046059600746588056765271819507440779823149282867563364699153213470346878290132781911692627805330578980286387234905252760714670790100881141557410602170172910380200700286732571641810857107454393560470801253122691527208391116453283370235277774869979042828967234127601875154312610941412791114528253027150691518108278034818632920548571747020630980187921823926835889249895915259746363695573928221275709617123747643327838448438906321456414408648137584972142816432189562329823000245777415069618513061257880844694675465911663620420630702729773132216749676034575935123864785651933068072801627378082868058851454128833654132689609621600496809755555816592929648675912133976120683019864380543858194547160147335899480937848983782478935052195122047390993001422787702621971788453779491460988275183080374018747791232594008069521287424286172843541948493158037565549988247372446831240391003559668936775496603616153380694906576384148949905702565994952255967718083801652619163620208564466741554055663179012383239842912242925662199876889965893526416169069561747578118169693261409516536684336437795425686314616177921752316659249730666809900475926290857706303306190025");

  x = create(
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223333"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFDDCCBB12345784365482785490910375482749031560427490368427489FFA"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = sqr(x);
  y_str = print_string(y);
  // std::cout << "y = " << y_str << std::endl;
  EXPECT_TRUE(y_str == "83636660277869128861332115718490988505597354230353377231053594576562874595138135036582227317278036289504315270465957691921791565281085712006745965327044514175287559520071629967694787115413193673357164132740592190510557737306056644508697804997241575971051737868787356898783024671709889244050929714465280881855161006783674127361017684941072065225835020275048290475384839919905243164430419841968209790177150128560919460978609575021479465489556031512736100240552806505093277458044624916450625008428245106902463146758297693300870519119920220420999677426624361107208356237351521018871632654579635602485049004369468786186399462404073644783155290212433819239115215050525360389902217290068968731383735436358601375549710022393765734011264569529143293043426725702123052115846041782374338521558545149660691947800950604735622346649957058749433332697800153926716620453053543492316401710821058975554715298353380541486831147657750859204529965493121985345740159702678246117028623557155393947448545383110274998997516066136909670115733938498298921725154109755176126431937842814477684856415167672705119031083581424572701147727978031798679469555727763867580259577723510208607460928993121254155843222670077928422302971826361513168819276172638058545485825226093194553603830509825495637766631555205398857571652244600797618767475764278535211955311146226772322976953255733277982712331378400757174150707506996248626471985571037147459491383105456706592431485558947273990416611291859020490119773553793363956654088300427707564603429360398256659878426903431617120010882249");
}

TEST(Mympz, SqrRecursive) {
  bignum_t x,y;
  std::string y_str;

  x = create(
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = sqr(x);
  y_str = print_string(y);
  // std::cout << "y = " << y_str << std::endl;
  EXPECT_TRUE(y_str == "485896042983028913678661348953308258714477827389268530046969746530481130046199128814188131429358504231585576129596502075968815822333787027795679131150707263446450309197978491219783541759527685365189504549252186320357702086611209329251557978014678497659998394227178967457450041564081679709886740852392086323078098884985588829856872597963145463086581651815871610279139232467036426659531843933040322514227423917513301423195230412898986169480885094333941208194418673440796190108705975706615408915206244723816844896663950924254755792819557158706273162951513137933336939675329431619955458132007270911847129424834965529584866182673241813922055625172412104407893408207818025370295563982382139522656204815169828489024726703278132111798135776242392646330204353391610229077305522982125454281376483720407232017580543679287988658515937144337065194084027056691617342896433961712206549267359420823115860162278586973269529808957056515517662569323132170321853279247265602566041070421703274643090235755116868434607893333947205316590540428400838629219391596169293287310577839044890733825014572488231253206744315226300164415446161602783358211267096300736244245537096151481659342095857980216123803658682299324554313714662794944939106349804899413127796835450881988239964934347953379607128429439178067937757083379452449070305600614643261347213090952209248560874304947204902941670045211555120353456453649859286901538520369488683862258414423564897146494178259834991918072611083646708778704429184274797829845661149184564653233270063100305285066900762858599424344646895736082408317120643851023148743958569502238810922291585666444189950509825177112195971136615535674120855125025015918489279296236664205964405477570769437990639548100041659431863913523235479834020255973396944789676287045847012342434246137801583412369758526149408081254652277618029112063482117954058990313018500656242886331407946492825324438212958250657399944007290766254616578561011330095983197101091692262590989857468387658381975992959532473749240252512849901031419612443152908341529761746862014829827234561591073861250827340871243411813449947602834748859330547289176777661807029131539137277174313653253658507334360215375750332618740433246666994691087067222053105804315389354991226574208633528821119227143752039571973697424676564896286100972494310486596595062747929830443877355837929542535681084892577608265936393532306858922241720433720205468348813044208929209705091576086785240444687494820434323468018458160199437684662658201");

  x = create(
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "4DDCAADD11223344FFBCDEA1234DDCDDCCAABB1289232CCAABB1289232CCAABB"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "44FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA123"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "AADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233AA"
    "FFAADD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233"
    "19DD11223344FFBCDEA1234DDCAADD11223344FFBCDEA1234DDCAADD112233DD"
  ,true);
  // std::cout << "x = " << print_string(x) << std::endl;
  y = sqr(x);
  y_str = print_string(y);
  // std::cout << "y = " << y_str << std::endl;
  EXPECT_TRUE(y_str == "485896042983028913678661348953308258714477827389268530046969746530481130046199128814188131429358504231585576129596502075968815822333787027795679131150707263446450309197978491219783541759527685365189504549252186320357702086611209329251557978014678497659998394227178967457450041564081679709886740852392086323078098884985588829856872597963145463086581651815871610279139232467036426659531843933040322514227423917513301423195230412898986169480885094333941208194418673440796190108705975706615408915206244723816844896663950924254755792819557158706273162951513137933336939675329431619955458132007270911847129424834965529584866182673241813922055625172412104407893408207818025370295563982382139522656204815169828489024726703278132111798135776242392646330204353391610229077305522982125454281376483720407232017580543679287988658515937144337065194084027056691617342896433961712206549267359420823115860162278586973269529808957056515517662569323132170321853279247265602566041070421703274643090235755116868434607893334808440027092406776353832561435471394853772091507651100046564649449618594926964752579939565789212472895345221858304981063758824790714119257808676952456962787738160119688612244448032707570061000001013906682818862392778864587732732494948967497688593278985214850779952006970354631041771848158098483226500058678043448307009179903786494494478161088734430400187727463752429611878009420548067162407485708375431776559500793077769007320441922213003968057397727203875568991199669138066913841533982390554388711537165309002315315072856759942106648461317147565690206304333807352432995786210639987446352296028877976098473023347752652092361747844334626589757159049599388554513758501573316301422440139172099678993964272443148721986499534521608080898813386719827862354131979324619769792046313238869485981727799185643352280306692575962538354112824819370043100085494707290109178546921625757552749306161510363414189237114495197926063562783675117659107795078018221165257261179143202180137063725936032819982481120415440878315816339235363093823254553351708883377433149604551963131582990718826849342813805737251585760347424118105186198367162569935314036620338521086422299452944417051820717099867535162441854989508609058334034163567042609240366739111436731418054903472419607977885296689212304628375672548218618578276277085454582846851742355623944834044358933912556121228441922907275315190052667677747613427082714259948758918990719399944373914628465496652590384829196564960333672154219793609");
}

int main(int argc, char* argv[]) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}